2006-02-06  Per Bothner  <per@bothner.com>

	* ClassMethodProc.java: Remove a bunch of no-longer needed crub.
	The entire file will be removed soon.

2006-02-01  Per Bothner  <per@bothner.com>

	* ArrayGet.java (compile): Use ArrayType.make rather than creating
	a new ArrayType - which may not compare correctly.
	* ArrayLength.java (compile): Likewise.
	* ArrayNew.java (compile, getReturnType): Likewise.
	* ArraySet.java (compile): Likewise.

2006-01-24  Per Bothner  <per@bothner.com>

	* SlotSet.java (getField): Look for method using getMethod rather than
	getDeclaredMethod, so we can check inherited methods.
	Fixes bug introduced 2006-01-11.

2006-01-20  Per Bothner  <per@bothner.com>

	* Invoke.java: Extend 'make' procedure for primitive-array allocation.
	(typeFrom): Allow to return an ArrayType if this is 'make'.
	(apply, applyN): Update call-sites accordingly.
	(applyN, inline): Handle allocation of arrays.

	* Invoke.java (typeFrom): Fix arguments to WrongType constructor.
	We used to get a NullPointerException is WrappedException.<init>.

2006-01-11  Per Bothner  <per@bothner.com>

	* SlotSet.java (apply2): Use WrappedException.wrapIfNeeded.

	* SlotSet.java (getField): Simplify seraching for a setter method.
	Specifically, look for any 1-argument method.

2006-01-05  Per Bothner  <per@bothner.com>

	* SlotGet.java: Use new Compilation.loadClasRef variant.

2006-01-04  Per Bothner  <per@bothner.com>

	* SlotGet.java (getField, compile): Pass the declaring-class of the
	field or method to isAccessible, not the possibly-derived class.
	* SlotSet.java (getField, compile): Likewise.

2005-12-05  Per Bothner  <per@bothner.com>

	* SlotGet.java (compile): Don't return compile-time-class for "class",
	unless isStatic.  Fixes Savannah bug #15151.

2005-12-03  Per Bothner  <per@bothner.com>

	* ClassMethodProc.java (CLASSTYPE_FOR): New constant.
	(makeExp): New method overloading.

2005-11-28  Per Bothner  <per@bothner.com>

	* SlotSet.java (compileSet):  Coerce argument to language-specific
	type, using new getLangTypeFor method. Use CheckedTarget.

	* SlotSet.java (compile): Fix name - for error message.

2005-11-25  Per Bothner  <per@bothner.com>

	* Invoke.java (checkKeywords): Take caller parameter.
	* SlotGet.java (getField): Use new caller parameter so we can look
	for method if Field isn't applicable.
	Simplify - type is always ClassType and name is always non-null.
	* SlotSet.java (getField): Likewise.

2005-11-23  Per Bothner  <per@bothner.com>

	* Invoke.java (applyN): Don't need to check for staticLink here.
	Instead, assume extra parameter for ClassType.
	(inline): Can more inline constructors regardless of whether
	there is or will be a static link.

2005-11-22  Per Bothner  <per@bothner.com>

	* SlotGet.java (getField): Adjust for updated ClassType.getField,
	to request all fields, not just public|protected ones.
	* SlotSet.java (getField): Likewise.

2005-11-16  Per Bothner  <per@bothner.com>

	* SlotGet.java (apply2): Use WrappedException.

	* ClassMethods.java (getMethods): Pass caller's package, if known,
	as context to ClassType.getMethods.

2005-10-16  Per Bothner  <per@bothner.com>

	* ClassMethods.java (getMethods): Kludge to search Type.string_type
	rather than type.tostring_type for methods.

2005-09-25  Per Bothner  <per@bothner.com>

	* Invoke.java (typeFrom): New private helper method.
	(apply(CallContext), apply(Object[],CallContext)): New methods.
	(applyN): Use typeFrom.
	* ClassMethodProc.java (kind): New field.
	(fixup): New method to initialize 'kind' field.
	(make, readExternal): Use fixup.
	(apply(CallContext)): New method - optimimization.
	(applyN, rewrite): Slight optimization by using kind field.
	(rewrite): Generalize func to handle QuoteExp and ReferenceExp.
	(toString): New method.

2005-08-08  Per Bothner  <per@bothner.com>

	* ClassMethodProc.java (castDecl): New static field.
	(CAST_METHOD_NAME, INSTANCEOF_METHOD_NAME): New constants.
	(applyN, rewrite): Support class cast operation.

2005-08-07  Per Bothner  <per@bothner.com>

	* SlotGet.java (apply2, compile): Implement "class" pseudo-field.

2005-08-04  Per Bothner  <per@bothner.com>

	* Invoke.java (getClassType, inline): Inline in 2-argument inline
	(inline): Overload to take a Compilation.
	* Invoke.java (inline): Allow inlining of constructor even if it
	doesn't yet exist as long as the class is static.

2005-08-03  Per Bothner  <per@bothner.com>

	* ClassMethodProc.java: Major rewrite. Now extends ProcedureN
	rather than GenericProc.
	(getMethods, inline, isApplicable, mtch0, match1, match2, match,
	match4, numArgs): Remove no-longer-appropriate methods.
	(makeExp, applyN, setN, rewrite): New methods.
	(makeMethod, makeMethodExp, fieldDecl, staticFieldDecl, makeDecl,
	invokeDecl, invokeStaticDecl): New static fields.

	* SlotSet.java (setField$Ex): Rename to set$Mnfield$Ex to match current
	mangling scheme for field names.
	(setStaticField$Ex): Likewise rename to set$Mnstatic$Mnfield$Ex.
	* SlotGet.java (field, staticField): Update setter references.

	* FieldLocation.java (get): Return defaultValue on setup exception.

2005-07-21  Per Bothner  <per@bothner.com>

	* ClassMemberLocation.java (defineAll): Inline one overload in other,
	since we we only need/use one variation.

2005-07-20  Per Bothner  <per@bothner.com>

	* StaticFieldLocation.java (isConstant): Remove - use inherited method.

2005-06-02  Per Bothner  <per@bothner.com>

	* FieldLocation.java (getDeclaration): Trivial improvement.

2005-05-27  Per Bothner  <per@bothner.com>

	* FieldLocation.java (get): Fix handling of INDIRECT_LOCATION.

2005-05-19  Per Bothner  <per@bothner.com>

	* ClassMethods.java (checkMethod): New method overloading.
	* SlotGet.java (compile): Use new method to avoid premature mangling.
	(getField): Instead, we have to mangle a field name here.

2005-05-17  Per Bothner  <per@bothner.com>

	* Invoke.java (inline): Fix logic error in okCount==0 case.
	(append): New private jeper method.
	(inline): Use append to format warnings.

2005-05-14  Per Bothner  <per@bothner.com>

	* StaticFieldLocation.java (get): Setting value field from result
	of super.get violates latter's invariant.

2005-04-20  Per Bothner  <per@bothner.com>

	* FieldLocation.java (setup): Call super.setup() to set rfield.

	* ClassMemberLocation.java (setup): Use initCause to set cause, if
	use:java.lang.Throwable.getCause PreProcess keyword is set (default).

2005-03-29  Per Bothner  <per@bothner.com>

	* FieldLocation.java (isIndirectLocation): Make public - for require.
	(getDeclaration): Get declaration via ModuleInfo.

2005-03-28  Per Bothner  <per@bothner.com>

	* SlotGet.java (field, staticField): Make fields final.
	* SlotGet.java (compile): Remove ineffective/obsolete test for
	indirection if Symbol - was never updated to use Location.
	(apply): Remove extra indirection if Location.
	* SlotSet.java (apply, compile): Likewise.

2005-03-24  Per Bothner  <per@bothner.com>

	* FieldLocation.java (getField, getFType): New methods.

	* FieldLocation.java (getDeclaration): Do setKindFlags if needed.

2005-03-23  Per Bothner  <per@bothner.com>

	* FieldLocation.java (PROCEDURE, SYNTAX, KIND_FLAGS_SET): New flags.
	(setProcedure, setSyntax): Also set CONSTANT and KIND_FLAGS_SET.
	(setKindFlags): New function.
	(isProcedureOrSyntax, getDeclaration, setup): Use setKindFlags.
	(isConstant, isBound):  Use setKindFlags to avoid loading class..

2005-03-16  Per Bothner  <per@bothner.com>

	* ClassMemberLocation.java (defineAll): Skip PRIVATE_PREFIX and
	"*$instance" fields.

2005-03-11  Per Bothner  <per@bothner.com>

	* FieldLocation.java (PROCEDURE, SYNTAX): New constants.
	(setup): Tweak accordingly.
	(setProcedure, setSyntax, isProcedureOrSyntax): New methods.
	* StaticFieldLocation.java (define): Return StaticFieldLocation.

2005-03-07  Per Bothner  <per@bothner.com>

	* InstanceOf.java: Update Interpreter -> Language.

2005-03-04  Per Bothner  <per@bothner.com>

	* ClassMemberLocation.java: Update Interpreter -> Language.
	* SlotGet.java: Likewise.
	* SlotSet.java: Likewise.

2005-03-03  Per Bothner  <per@bothner.com>

	* ClassMemberLocation.java (getInstance, setInstance): New methods.
	(make): Remove method.
	* FieldLocation.java: Mew class, extends ClassMemberLocation.
	* Makefile.am: Update accordingly.
	* StaticFieldLocation.java: Changed to extend FieldLocation.
	(decl, value, getDeclaration): Moved to FieldLocation.

2005-03-02  Per Bothner  <per@bothner.com>

	* InstanceOf.java (emitIsInstance): Update getInterpreter->getLanguage.

2005-02-24  Per Bothner  <per@bothner.com>

	* ClassMethodProc.java: Update Interpreter->Language.
	* ClassMethods.java: Likewise.
	* Invoke.java: Likewise.

2005-02-07  Per Bothner  <per@bothner.com>

	* ClassMethods.java (classMethods): New static field.

	* StaticFieldLocation.java (make): New static factory method.
	* ClassMemberLocation (make(String,String)): Remove factory method.

2005-01-29  Per Bothner  <per@bothner.com>

	* ClassMethods.java (apply(String, String)): Remove no-longer-used
	static method.

2005-01-07  Per Bothner  <per@bothner.com>

	* SlotGet.java (apply2): Update to use non-deprecated method.

	* StaticFieldLocation.java: Split imports to avoid gcj 3.4.2 bug.

2004-12-29  Per Bothner  <per@bothner.com>

	* ClassMemberLocation.java (define): Minor non-functional tweaks.

	* StaticFieldLocation.java: New constructor - currently unused.

2004-12-27  Per Bothner  <per@bothner.com>

	* ClassMemberLocation.java (defineAll): Ignore fields whose names
	start with PRIVATE_PREFIX.

2004-12-07  Per Bothner  <per@bothner.com>

	* SlotGet.java: Update to use Location in place of Symbol.
	* SlotSet.java: Likewise.

	* ClassMemberConstraint.java: Removed class, replaced by ...
	* ClassMemberLocation.java: New class, extends Location.
	* StaticFieldConstraint.java: Removed class, replaced by ...
	* StaticFieldLocation.java: New class, extends ClassMemberLocation.
	* Makefile.am: Update accordingly.

2004-12-05  Per Bothner  <per@bothner.com>

	* Invoke.java (inline): Add overloading.  Support constructing
	PairClasstype instances with static-link.

	* ClassMethodProc.java: New class, extends GenericProc.
	* Makefile.am: Update accordingly.

2004-10-14  Per Bothner  <per@bothner.com>

	* InstanceOf.java (compile):  Call usedClass.
	Fixes bug reported today by Dominique Boucher.

2004-08-05  Chris Dean  <ctdean@sokitomi.com>

	* SlotGet.java (Inlineable):  Check for "isFname" methods.
	* SlotSet.java (Inlineable):  Likewise.

2004-08-08  Per Bothner  <per@bothner.com>

	* Invoke.java (applyN):  Use new matchN method.  Don't use applyV.
	* TypeSwitch.java (apply):  Use new matchN/check0 methods.

2004-08-03  Per Bothner  <per@bothner.com>

	* TypeSwitch.java:  Extend MethodProc instead of CpsProcedure.

2004-07-20  Per Bothner  <per@bothner.com>

	* ArrayLength.java:  Remove unused import statements.
	* TypeSwitch.java:  Likewise.

2004-05-03  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (define):  If existing constaint is
	ClassMemberConstraint and value is the same, do nothing.  This fixes
	an optimization bug where car/cdr GenericProcs did not get resolved.

2004-04-17  Per Bothner  <per@bothner.com>

	* Invoke.java (inline):  Suppress most warnings if the flag
	warn-invoke-unknown-method flag is turned off.

2004-02-11  Per Bothner  <per@bothner.com>

	* ClassMethods.java (getMethods - two overloads):  New parameter
	'caller'; pass it to MethodFilter.  Remove redundant modifiers test.
	(class MethodFilter):  Add caller field.
	(select):  Check if method is accessible.
	* Invoke.java (getMethods):  New parameter 'caller'.
	(inline):  Get our calling class and pass it to getMethods.
	(getMethods(5 params)):  Inline in getStaticMethod.
	* SlotGet.java (compile):  Check if field/method is accessible.
	* SlotSet.java (compile):  Check if field/method is accessible.

2003-11-09  Per Bothner  <per@bothner.com>

	* ClassMethods.java (class MethodFilter):  Enhance so it also matches
	methods whose names in "$X" or "$V$X".

2003-10-30  Per Bothner  <per@bothner.com>

	* OccurrenceType.java:  Change to extends ObjectType.  This sets
	size to 4 so isVoid returns false.

	* OccurrenceType.java (toString):  New method.

2003-10-19  Per Bothner  <per@bothner.com>

	* Invoke.java (inline):  Check 'warn-invoke-unknown-method' option
	before emitting warning.

2003-10-07  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (define):  Check for Procedure
	whose name is a Symbol.

2003-09-30  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (get):  Inline the 'setup' method,
	but return defaultValue instead of throwing UnboundSymbol.

2003-08-09  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (define):  Demangle field name
	when field is non-final.

2003-07-15  Chris Dean  <Chris.Dean@sokitomi.com>

	* ClassMethods.java (removeRedundantMethods):  New helper method.
	(getMethods):  Handle extra is_special flag, for invoke-special.
	* Invoke.java (invokeSpecial):  New static field.
	(applyN):  Check for and dis-allow invoke-special.
	(getMethods):  Handle invoke-special.
	
2003-07-12  Chris Dean  <Chris.Dean@sokitomi.com>

	* ArrayGet.java (Externalizable): Implement writeExternal, 
	readExternal.  Fixes Savannah bug #4289
	* ArraySet.java (Externalizable): Likewise
	* ArrayNew.java (Externalizable): Likewise
	* ArrayLength.java (Externalizable): Likewise
    
2003-06-06  Per Bothner  <per@bothner.com>

	* Invoke.java (inlineClassName, inline): Call ApplyExp.setLine.

2003-05-17  Per Bothner  <per@bothner.com>

	* Invoke.java (applyN, applyN):  Use Symbol's getName method.

	* Invoke.java (inlineClassName):  Take InlineCalls parameter instead
	of Interpreter.  Get latter from former.
	If type is a Classtype and isExisting, emit error is not found.

	* InstanceOf.java (inline):  Upadte call to inlineClassName.
	* SlotGet.java (inline):  Likewise.
	* SlotSet.java (inline):  Likewise.

2003-05-16  Per Bothner  <per@bothner.com>

	* ClassMethods.java (checkName):  Take new 'reversible' parameter.
	* Invoke.java (getMethodName):  Pass false to checkName.
	* SlotGet.java (compile, getReturnType):  Pass true to checkName.
	* SlotSet.java (compile):  Likewise.
	Fixes bug reported 05-13 by Chris Dean <Chris.Dean@sokitomi.com>.

2003-05-13  Per Bothner  <per@bothner.com>

	* OccurrenceType.java:  New class, extends Type.
	* Makefile.am (java_sources):  Add new file.

2003-05-04  Per Bothner  <per@bothner.com>

	* Invoke.java (applyN):  Revert 04-30 change.
	* ClassMethods.java (apply):  Mangle method names non-reversibly.
	(checkName):  Likewise.

2003-04-30  Per Bothner  <per@bothner.com>

	* Invoke.java (applyN):  Use mangleNameIfNeeded rather than plain
	mangleName for consistency.

2002-11-23  Per Bothner  <per@bothner.com>

	* StaticFieldConstraint.java:  Moved from kawa.standard.
	* Makefile.am (java_sources):  Add new file.

2002-11-20  Per Bothner  <bothner@bothner.com>

	* ClassMethods.java:  Convert from ProcedureN to Procedure2.
	(apply2):  New method, replaces applyN.
	(apply(String,String)):  New method.

	* InvokeNamed.java:  Remove - don't need it after all.
	* Makefile.am:  Update accordingly.

2002-11-16  Per Bothner  <per@bothner.com>

	* InvokeNamed.java:  New class, extends ProcedureN.
	* Makefile.am (java_sources):  Add InvokeNamed.java.

2002-11-15  Per Bothner  <per@bothner.com>

	* ClassMethods.java (checkName):  Use Symbol's getName, not toString.

2002-11-10  Per Bothner  <per@bothner.com>

	* Invoke.java (kind):  New otpions 's' is static methods only;  'S' is
	changed to static or non-static (as documented for invoke-static).
	(applyN, getMethods, inline):  Handle both 's' and 'S' kinds.
	(inline):  If kinds=='S' and there is a single definitely ok static
	method, prefer it over non-static methods.

2002-09-26  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (define):  Special handling for aliases,
	recognized by having the type gnu.mapping.Location.

2002-09-21  Per Bothner  <per@bothner.com>

	* SlotGet.java (compile):  If there is no reflect-class (mapbe because
	we're currently compiling it), don't try to get its lang-specific type.

	* Invoke.java (inline):  Don't inline 'make' for new non-existing type.

2002-08-16  Per Bothner  <per@bothner.com>

	* Invoke.java (inlineClassName):  Allow plain Type, not just
	ClassType.  This allows (as <int> exp) to be inlined better.

2002-08-07  Per Bothner  <per@bothner.com>

	* SlotSet.java (compile):  Handle cals whose 2nd arg is a Field or
	Method, as created when inlining (make <type> field: value).

2002-07-25  Per Bothner  <per@bothner.com>

	* SlotSet.java (returnSelf):  New field.
	(setFieldReturnObject):  New static final field.
	(apply3, compile, getReturnType):  Handle returnSelf.
	* Invoke.java:  No longer implement Inlineable.
	(compile, getReturnType):  Remove methods.
	(inline):  Enhance, using most of the old logic from compile.
	We can do better type propagation easier this way.

2002-07-21  Per Bothner  <per@bothner.com>

	* InstanceOf.java, Invoke.java, SlotGet.java, SlotSet.java,
	TypeSwitch.java (inline):  Update to take extra ExpWalker parameter.

2002-06-18  Per Bothner  <per@bothner.com>

	* SlotSet.java (getField):  Call Compilation.mangleNameIfNeeded.

2002-06-05  Per Bothner  <per@bothner.com>

	* SlotGet.java (compile):  Convert field type to language type.

	* SlotGet.java (apply2, inline):  Use getInterpreter method.

2002-05-19  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (setup):  Fix name/this.name confusion.

2002-02-12  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (define):  If value is Named,
	handle case where getName() returns null.

	* Invoke.java (applyN):  Use CallContext.getInstance().

2002-01-31  Per Bothner  <per@bothner.com>

	* Invoke.java (inlineClassName):  New static method.
	* Invoke.java:  Implement CanInline.
	(inline): New method calls inlineClassName
	* InstanceOf.java:  Likewise.
	* SlotGet.java:  Likewise.
	* SlotSet.java:  Likewise.

2001-12-24  Per Bothner  <per@bothner.com>

	* TypeSwitch.java:  New class, implements XQuery 'typeswitch'.
	* Makefile.am (java_sources):  Update accordingly.

	* InstanceOf.java (emitIsInstance):  New static helper method.
	(compile):  If type us TypeValue, calls its emitIsInstance method.

2001-11-24  Per Bothner  <per@bothner.com>

	* SlotGet.java (makeGetField):  New method, moved from Expression.

2001-11-21  Per Bothner  <per@bothner.com>

	* ClassMethods.java (getMethods):  Match change in ClassType's
	getMethods class.  Now use "-" to specify "no package" - i.e. skip all
	private classes.  Fixes problem reported by Walter Pelissero

2001-11-18  Per Bothner  <per@bothner.com>

	* ClassMethods.java (getMethods):  Use ClassType's new getMethods
	method, using Vector instead of Method[].
	Fix off-by-one loop when duplicate found - don't increment i.

2001-11-05  Per Bothner  <per@bothner.com>

	* Invoke.java (compile):  Better warning - list applicable methods.

2001-10-19  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (get):  New takes defaultValue param.

	* Invoke.java:  Various methods now specify throws Throwable.

2001-10-05  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (set):  If we cannot set the field,
	change the constraint to a TrivialConstraint (kludge).

2001-08-30  Per Bothner  <per@bothner.com>

	* ClassMethods.java (checkName):  Use mangleNameIfNeeded.
	* SlotGet.java (apply2):  Likewise.
	* SlotSet.java (apply):  Likewise.

2001-08-23  Per Bothner  <per@bothner.com>

	* Invoke.java:  Update for PairClassType field rename.

	* ClassMemberConstraint.java (define):  Use reversible demangling.

2001-08-16  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (define):  If value isn't a Named,
	then demangle the field name.

	* Invoke.java (applyN):  Handle PairClassType and staticLink.
	(getClassType):  If PairClassType, get its instance class.

	* SlotGet.java (apply2, getField):  Use ClassExp.slotToMethodName.
	(getField):  Make static.
	* SlotSet.java (apply,, getField):  Use ClassExp.slotToMethodName.

2001-07-17  Per Bothner  <per@bothner.com>

	* SlotSet.java (isStatic):  Make non-static (duh).
	(setField$Ex, setStaticField$Ex):  New static final fields.
	(<init>):  New constructor.
	(setField, setStaticField):  New static methods.
	(apply):  Take extra isStatic parameter.
	(apply3):  Pass this.isStatic to apply.
	* Invoke.java (applyN):  Pass extra arg to SlotSet.apply.
	* SlotGet.java (set2):  Likewise.
	(setter):  New field.
	(<init>):  New init also takes setter arg.
	(field, staticField):  Specify setters.
	(getSetter):  New method.

	* SlotGet.java (apply2):  If field is final Binding, get its value.
	(compile):  Likewise handle case of indirect Binding field.
	* SLotSet.java (apply):  If field is final Binding, set its value.
	(compileSet):  Likewise handle case of indirect Binding field.

	* ClassMemberConstraint.java:  Better error messages if unbound.

2001-06-19  Per Bothner  <per@bothner.com>

	* Invoke.java:  Handle method name symbol implemented using Binding.
	* ClassMethods.java:  Likewise.

2001-05-16  Per Bothner  <per@bothner.com>

	* ArrayLength.java:  Update to use LangPrimType.
	* SlotGet.java:  Likewise.

2001-03-08  Per Bothner  <per@bothner.com>

	* ClassMethods.java, SlotGet.java:  Update for new gnu.lists.Fstring.

	* Invoke.java (compile):  Better error messages.

2000-12-13  Per Bothner  <per@bothner.com>

	* SlotGet.java (compile):  Comment out Oct 12 change - it isn't safe.

2000-10-12  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (field):  Remove field;  don't use
	gnu.bytecode.Field; only java.lang.reflect.Field.

	* Invoke.java (invoke, invokeStatic, make):  Make fields final.

	* Invoke.java (compile):  Catch missing-class exception; emit warning.

	* SlotGet.java (set2):  Swap argument order for new setter convention.

	* SlotGet.java (compile):  Inline final static int fields.

	* InstanceOf.java (<init>):  New constructor.

2000-08-17  Per Bothner  <per@bothner.com>

	* Invoke.java (applyN):  Update for new MethodProc protocol.

2000-06-17  Per Bothner  <per@bothner.com>

	* InstanceOf.java:  Moved from kawa.standard.
	* Makefile.am:  Update accordingly.

2000-06-09  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (define):  Re-structure.

2000-05-28  Per Bothner  <per@bothner.com>

	* SlotGet.java (apply2): Use Values.noArgs instead of Procedure.noArgs.

	* ClassMemberConstraint.java (define):  Trivial optimization.

2000-05-22  Per Bothner  <per@bothner.com>

	* ClassMethods.java (class MethodFilter):  New non-public class.
	(getMethods):  Re-write to use ClassType's getMethods.
	(selectMethod, getMethods, getConstructors):  Remove methods.
	* Invoke.java (interpreter):  New field.  Use it.
	(getStaticMethod, getMethod):  New methods.

2000-05-09  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (define):	Just use the new version of
	the Environment define method.

2000-04-12  Per Bothner  <per@bothner.com>

	* SlotGet.java (apply2, compile, getReturnType):  Handle 'length
	of an array as a special case.

2000-03-17  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (define):  Sigh.  Put in some kludge
	for languages with dual separate namespaces.

2000-02-27  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (define):  Since kawa.lang.Syntax now
	implements Named, we no longer need special case for it.

	Various tweaks for better javadoc processing.
	* package.html:  New file.

2000-01-31  Per Bothner  <per@bothner.com>

	* ClassMethods.java (getMethods):  Interpreter is now in gnu.expr.
	(apply):  Change to Interpreter.defaultInterpreter.
	* SlotGet.java (apply2):  Likewise.
	* SlotSet.java (apply):  Likewise.

2000-01-24  Per Bothner  <per@bothner.com>

	* ArrayGet.java:  Moved/renamed from kawa/lang/PrimArrayGet.java.
	* ArraySet.java:  Moved/renamed from kawa/lang/PrimArraySet.java.
	* ArrayNew.java:  Moved/renamed from kawa/lang/PrimArrayNew.java.
	* ArrayLength.java:  Moved/renamed from kawa/lang/PrimArrayLength.java.
	* StaticGet.java:  Moved/renamed from kawa/lang/GetStatic.java.
	* StaticSet.java:  Moved/renamed from kawa/lang/SetStatic.java.
	* Makefile.am, Makefile.in (java_JAVA):  Update for now classes.

2000-01-23  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (<Init>(Field)):  New constructor.
	(defineAll, define):  New static methods.

1999-12-27  Per Bothner  <per@bothner.com>

	* ClassMemberConstraint.java (<init>):  New constructor.
	(define):  New static method.

1999-12-06  Per Bothner  <per@bothner.com>

	* Invoke.java (getMethods):  Set cacheArgs *after* recursive call done.
	(compile):  Use methods instead of acheMethods.

	* ClassMemberConstraint.java:  New class;  extends Constraint.
	* Makefile.am, Makefile.in (java_JAVA): Add ClassMemberConstraint.java.
	* Invoke.java (applyN):  Throw exception if no applicable method found.
	(getMethods):  Add argsToSkip parameter.
	(compile, getReturnType):  Fix getMethods call.
	(makeInvokeStatic):  New method.

1999-11-15  Per Bothner  <per@bothner.com>

	* ClassMethods.java (selectApplicable, apply):  New static methods.
	(checkName):  New helper method.

	* Invoke.java:  Generalize to subsume InvokeStatic and MakeInstance.
	Also implement Inlineable.
	* InvokeStatic.java:  Remove class - subsumed by Invoke.
	* MakeInstance.java:  Remove class - subsumed by Invoke.
	* Makefile.am, Makefile.in (java_JAVA):  Remove rmeoved classes.
	* SlotGet.java, SlotSet.java:  Also handle `static-field'.
	Implement Inlineable.

1999-11-03  Per Bothner  <per@bothner.com>

	* ClassMethods.java (apply):  Check if method isApplicable.

	* InvokeStatic.java (invokeStatic):  New static field.
	(apply$V):  New method.
	(getMethod):  Pass argument types to ClassMethods.apply.
	* MakeInstance.java (getMethod):  Likewise.

1999-10-25  Per Bothner  <per@bothner.com>

	* ClassMethods.java (apply):  Return MethodProc, not Procedure.
	* MakeInstance.java:  Make it implement Inlineable.
	Handle "<init>" specially.
	* Invoke.java:  New class; extends ProcedureN.
	* Makefile.am, Makefile.in (java_JAVA):  Add Invoke.java.

1999-09-14  Per Bothner  <per@bothner.com>

	New package.
	* ClassMethods.java:  Moved from kawa/standard/class_methods.java.
	* InvokeStatic.java:  Moved from kawa/lang/InvokeStatic.java.
	* MakeInstance.java:  New, but subsumes kawa/standard/make.java.
	* SlotGet.java:  Moved from kawa/standard/field.java.
	* SlotSet.java:  New class.
	* Makefile.am, Makefile.in:  New files.
